#include <iostream>
#include <vector>

using namespace std;


void matrica(int v, int e, int **Arr, int **k)
{
  for(int i=0,i<v,i++)
  {
    for(int j=0,j<v,j++)
    {
      int k[i][j];
    }
  }
  for (int i=0; i<e; i++) 
  {
        k[Arr[i][0]-1][Arr[i][1]-1]=1;
        k[Arr[i][1]-1][Arr[i][0]-1]=1;
  }
}

void function(int **G, int v, int e, vector < int > &cycle, int v0)
{
    for (int i=0; i<v; i++) 
    {
        if (G[v0][i]) 
        {
            G[v0][i]=0;
            G[i][v0]=0;
            function (G, v, e, cycle, i);
        }
    }
    cycle.push_back(v0);
}

int main() {
    int e, v;
    int **Arr=new int* [e];
    for (int i=0; i<e; i++) {
    
        Arr[i]=new int [2];
    }
     int **G=new int* [v]; 
    for (int i=0; i<v; i++) 
    {
        G[i]=new int [v];
    }
    matrica (G, Arr, v, e);
    int p=0;
    for (int i=0; i<v; i++)
    {
        for (int j=0; j<v; j++)
        {
            p+=G[i][j];
        }
        if (p%2==0) 
        {
            p=0;
        }
        else {
            break;
        }
    }
    if (p!=0)
    {
        cout<<"No Eulerian cycle";
    }
    else {
        vector <int> cycle;
        FindEulerianCycle (G, v, e, cycle, 0);
        for (int i=0; i<cycle.size(); i++)
        {
            cout<<cycle[i]+1<<" ";
        }
    }
    return 0;
}
}
