#include <iostream>
#include <queue>
using namespace std; 

struct Node 
{ 
int data; 
Node*left=NULL; 
Node*right=NULL; 
}; 

class Binary Tree 
{ 
Node*root; 
public: 
root=new node;
root->data=data;
root->right=NULL;
root->left=NULL;
}

void push(int c)
{ root=new node;
  root->data=data;
  root->right=NULL;
  root->left=NULL;
    if(c>root)
    {
      push(c->right); 
      {
        c->right=new node;
        c->data=data;
        c->right=NULL;
        c->left=NULL;
      }
    }
    if(c<root)
    {
        push(c->left);
        {
        c->left=new node;
        c->data=data;
        c->right=NULL;
        c->left=NULL;
      }
    }
    
    
    
    bool DFS(int data,Node*n)
    {
        if(n==NULL)
        {
            return false;
        }
        if(n->data==data)
        {
            return true;
        }
        if (DFS(data, n->left))
        {
            return true;
        }
        if (DFS(data, n->right))
        {
            return true;
        }
        return false;
    }
    
    
    void BFS(int data)
    {
        queue<Node*>T;
        T.push(root);
        while(!T.empty())
        {
            Node*Tmp=T front();
            T.pop();
            if(Tmp->data==data)
            {
                return true;
            }
            if(Tmp->left!=NULL)
            {
                T.push(Tmp->left);
            }
            if(Tmp->right!=NULL)
            {
                T.push(Tmp->right);
            }
            return false;
        }
    }
    
    ~Binary Tree()
    {
        delete(root);
    }
};
